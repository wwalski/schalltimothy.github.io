{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BES Playbooks The Playbooks will support development and modernization efforts within the BES AFLCMC/HIA Logistic Division as it transforms its methodologies to procure, develop and implement specialized IT products using Agile methodology and best practices as specified via Enterprise Logistics IT. Agile mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. Automated Testing mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. User Experience","title":"Home"},{"location":"#bes-playbooks","text":"The Playbooks will support development and modernization efforts within the BES AFLCMC/HIA Logistic Division as it transforms its methodologies to procure, develop and implement specialized IT products using Agile methodology and best practices as specified via Enterprise Logistics IT.","title":"BES Playbooks"},{"location":"#agile","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site.","title":"Agile"},{"location":"#automated-testing","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Automated Testing"},{"location":"#user-experience","text":"","title":"User Experience"},{"location":"agile/","text":"Overview Purpose Agile Playbook Benefits -Consistent use of BEST practices and templates -Establishes AF Agile Body of Knowledge - continually improved by AF community -Provides \"Quick Start\" for new programs adopting agile working within AF -Provides non-technical professionals with an understanding of how to use agile -Builds confidence and effective communications across Government-Industry team -Identifies and reduces or eliminates barriers -Transforms culture from one focused on traditional processes to one focused on timely customer capability delivery. Audience While this Agile Playbook provides value to all personnel involved in a new agile project startup, the primary audience for this document is government project management teams determining how to enable an agile development environment. From that perspective, the Agile Playbook seeks to enable the government team for a startup or in-progress project to gain a better understanding of the steps necessary to proactively establish the regulatory and process guidelines that are conducive to an agile approach. To do this, the agile playbook will focus primarily on providing a better understanding of the following areas and how they enable the success of an agile project: -Contracts -Resources -Communications References DoDI 5000.75, Business Systems Requirements and Acquisition, Feb 2, 2017 US Air Force Enterprise Logistics Flight Plan v2.0 (ELFP), April 2016 Enterprise Logistics Technology Annex v1.0 (ELFP), June 2016 AFGM2018-63-146-01 Rapid Acquisition Activities 13 June 2018 AFMAN 63-144 Business Capability Requirements, Compliance, and System Acquisition 25 July 2018 AFPAM 63-123 Product Support Business Case Analysis 1 July 2017","title":"Agile"},{"location":"agile/#overview","text":"","title":"Overview"},{"location":"agile/#purpose","text":"","title":"Purpose"},{"location":"agile/#agile-playbook-benefits","text":"-Consistent use of BEST practices and templates -Establishes AF Agile Body of Knowledge - continually improved by AF community -Provides \"Quick Start\" for new programs adopting agile working within AF -Provides non-technical professionals with an understanding of how to use agile -Builds confidence and effective communications across Government-Industry team -Identifies and reduces or eliminates barriers -Transforms culture from one focused on traditional processes to one focused on timely customer capability delivery.","title":"Agile Playbook Benefits"},{"location":"agile/#audience","text":"While this Agile Playbook provides value to all personnel involved in a new agile project startup, the primary audience for this document is government project management teams determining how to enable an agile development environment. From that perspective, the Agile Playbook seeks to enable the government team for a startup or in-progress project to gain a better understanding of the steps necessary to proactively establish the regulatory and process guidelines that are conducive to an agile approach. To do this, the agile playbook will focus primarily on providing a better understanding of the following areas and how they enable the success of an agile project: -Contracts -Resources -Communications","title":"Audience"},{"location":"agile/#references","text":"DoDI 5000.75, Business Systems Requirements and Acquisition, Feb 2, 2017 US Air Force Enterprise Logistics Flight Plan v2.0 (ELFP), April 2016 Enterprise Logistics Technology Annex v1.0 (ELFP), June 2016 AFGM2018-63-146-01 Rapid Acquisition Activities 13 June 2018 AFMAN 63-144 Business Capability Requirements, Compliance, and System Acquisition 25 July 2018 AFPAM 63-123 Product Support Business Case Analysis 1 July 2017","title":"References"},{"location":"agiletrans/","text":"Agile Transformation Waterfall background (where is the reader coming from) It is challenging to use agile methods in the DoD and AF because the workforce has been trained in and has practiced the traditional waterfall methodology for 50+ years. In many ways, the waterfall methodology was implemented as a way to carefully control risk along the development path and accommodate the often stove piped organizations that supported development efforts. This means that the processes, procedures, acquisition rules, contracting approaches, testing requirements, and so on are all based on the traditional waterfall method. Agile Introduction 4 Agile Values The Agile Manifesto describes the overarching beliefs of Agile software development as follows (http://agilemanifesto.org): That is, while there is value in the items on the right, we value the items on the left more. Benefits of Agile over Traditional Methods Higher quality product (incremental development, continuous integration and automated testing tools allow developers to fix issues quicker when they are fresh in their mind and have fewer secondary effects on code built on top of a bug). Ability to change dynamically to customer/user wants, needs, and/or requirements (value adaptation based on increased transparency, formal feedback events, and high degree of customer collaboration). Ability to balance workloads based on cross-functional teams (while team members often have areas of expertise, agile emphasizes cross-functionality which allows flexibility to surge resources as necessary). Decreases and eventually eliminates the \"throw over the wall\" approach, thereby allowing development, operations, and security to work together iteratively to swarm on a particular issue or bug, should one come up, during releases to lower environments (this decreases the risk of failures in production if all environments are aligned and mirrored-appropriately). Shorter implementation time to usable product (provides quicker return on investment, decreased risk of project failure, faster end-user feedback into the development cycle and increased customer satisfaction). Ability to balance technical debt and new functionality, thereby decreasing technical debt over time. High-Level Differences Friction Points with Waterfall Lack of Ownership - The traditional regulatory environment is based on establishment of fixed requirements, letting the external development team develop the product and then inspecting and validating the product to see if it meets the requirements (tennis match of throwing things back and forth between customers and developers with the assumption that both parties understand the requirements in the same way). -- Recommended Mitigation : The key to any agile methodology is collaboration. A dedicated PO (PO) (can be a government employee or contractor on the business level or on the technical team) with decision making authority or immediate reach-back for those decisions is necessary to support the velocity of agile methodologies in being able to provide value in an ever-changing environment. Lack of Collaboration - Traditional design reviews (Preliminary Design Review / Critical Design Review) currently focus on developers presenting their design results at a fixed point of time after exhaustive analysis. -- Recommended Mitigation : What is needed is mini-collaborative design reviews that are done in such a way that integration elements are identified early enough while allowing additional design elements to be refined as close to the work being done as necessary (based on changes happening constantly - re-work will be generated on designs which are done too early and no longer apply to the current situation). Traditional CDRL formats - The traditional government waterfall process intentionally incurs oversight costs as a risk mitigation strategy to ensure that progress was made by contracted agents. In terms of documentations, the government includes in their Contract Deliverable Requirements List (CDRL) a list of documents which are formatted and generated based on a waterfall development framework. The reviewers of these documents are familiar with what the old contents were, and when reviewing delivered documents expect the same waterfall content which are focused on large immovable designs versus less-detailed more agile enabling designs. -- Recommended Mitigation : Contracts need to be modified up front so that only the necessary CDRLs that provide actual value are included and document deliveries are based on an agile timeline (smaller iterative updates versus large updates for significant milestones). (NOTE: While adequate documentation is necessary - the definition of \"adequate\" needs to be modified to provide timely value as determined by the document owners). See recommended CDRL considerations attachment in Section 3.5. Team and team member performance - Agile is based on team dynamics which take time to coalesce (normally that means there is a start-up period where less physical value is produced in the short-term while establishing the foundation to more rapidly produce value in the long-term). This means that by the straight-line value metrics of traditional project management, the project will appear behind at first. The normal strategy here is to provide more \"waterfall\" elements into the equation to try and \"catch-up\" the project which actually impedes / restricts the capabilities of the team to add value. Then in the end if the blame is placed on the agile system versus on the waterfall regulatory restrictions that were placed on it in order to \"catch it up\". -- Recommended Mitigation : Establish trust and transparency (see Communication Management section) as the team learns together how to implement an agile-based process which is understood and accepted by the government and development team. Include more formalized process to \"ramp up\" new government and contractor team members and their understanding of the system and environments. Uncontrolled change/scope creep versus managed change to provide increased value. Waterfall methodologies focus on a formal change management process in order to manage scope creep. Agile is inherently flexible in nature - it welcomes change based on the need to provide value to an ever-changing reality versus provide the value determined during a snapshot in time planning event which could have taken place months or years previously. However, the issue with agile is this inherent flexibility leads to general requirements which allow for the customer to revise in an ad hoc manner which facilitates uncontrolled scope creep (which is okay unless there is a hard deadline in providing the product based on the initial general requirements). -- Recommended Mitigation : Establish a flexible change management system (this will be based on the amount of trust established by the team). It should be flexible enough to rapidly adapt to the changing reality of what the definition of value is within existing requirements while implementing formal steps to manage scope creep (an example is adding a new requirement / feature versus revising an existing one). Earned value reporting - EV is an attempt to monitor the progress of a project by linking contract to cost to contents - these fixed linkages established at the beginning of the contract are normally difficult to change as the work adapts to reality (I.e. we already reported these features and their value to our superiors and it is too hard to revise - so we would rather use the logic we reported instead of revising that logic to fit reality). This often causes a disconnect between the development team and the contracting team as the metrics based on past logic which EV is measuring does not reflect the evolved reality existing in the agile development environment. -- Recommended Mitigation : Link earned value costs to features (can be based on high-level estimates done during feature driven planning. Conduct final feature refinement (work / story breakdown) as close to the actual development effort as possible (as an example for Scrum - conduct feature refinement 2 sprints out to better reflect reality. Base the EV metrics on the percentage of the features decomposed work items / user stories completed. External testing requirements - external test organizations (including those involved with Development Testing and Evaluation (DT&E), Quality Testing and Evaluation (QT&E), etc) often require advanced information for their test events (examples include the release contents, developers test plan, test cases, conditions, etc. Sometimes up to 270 days prior to a test event). Also, these test events are scheduled at fixed milestones versus being iterative in nature. These two items constrain the flexibility of agile to both react to evolving requirements as well as receive timely feedback from testers to incorporate in current development efforts (waiting until the contents of 6 sprints are released before receiving any feedback on their results - see Extreme Programming (XP) Test Driven Development section for possible practices). -- Recommended Mitigation : External testers need to be integrated into the government / development team to derive the evolution of the requirements in preparation for their external testing. An additional step is to establish an iterative external testing cycle which coincides with the agile framework battle rhythm (rather than conduct annual large testing events). Pure agile theorists - unable to allow for regulatory requirements because they are \"not agile\". One of the final and most difficult problems is not the transition from waterfall to agile of the government, but the inability of agile implementers to allow for the regulatory requirements mandated by the government. Just as a waterfall purist will blame agile for all difficulties encountered, the agile purist will blame all issues on the waterfall regulations imposed. -- Recommended Mitigation : What is necessary is to find the correct hybrid framework between the two extremes that allow the process to work in the most efficient manner possible and also allows buy-in from all team members (the transition from a strictly waterfall to an appropriate hybrid framework may also be iterative in nature).","title":"-Agile Transformation"},{"location":"agiletrans/#agile-transformation","text":"","title":"Agile Transformation"},{"location":"agiletrans/#waterfall-background-where-is-the-reader-coming-from","text":"It is challenging to use agile methods in the DoD and AF because the workforce has been trained in and has practiced the traditional waterfall methodology for 50+ years. In many ways, the waterfall methodology was implemented as a way to carefully control risk along the development path and accommodate the often stove piped organizations that supported development efforts. This means that the processes, procedures, acquisition rules, contracting approaches, testing requirements, and so on are all based on the traditional waterfall method.","title":"Waterfall background (where is the reader coming from)"},{"location":"agiletrans/#agile-introduction","text":"","title":"Agile Introduction"},{"location":"agiletrans/#4-agile-values","text":"The Agile Manifesto describes the overarching beliefs of Agile software development as follows (http://agilemanifesto.org): That is, while there is value in the items on the right, we value the items on the left more.","title":"4 Agile Values"},{"location":"agiletrans/#benefits-of-agile-over-traditional-methods","text":"Higher quality product (incremental development, continuous integration and automated testing tools allow developers to fix issues quicker when they are fresh in their mind and have fewer secondary effects on code built on top of a bug). Ability to change dynamically to customer/user wants, needs, and/or requirements (value adaptation based on increased transparency, formal feedback events, and high degree of customer collaboration). Ability to balance workloads based on cross-functional teams (while team members often have areas of expertise, agile emphasizes cross-functionality which allows flexibility to surge resources as necessary). Decreases and eventually eliminates the \"throw over the wall\" approach, thereby allowing development, operations, and security to work together iteratively to swarm on a particular issue or bug, should one come up, during releases to lower environments (this decreases the risk of failures in production if all environments are aligned and mirrored-appropriately). Shorter implementation time to usable product (provides quicker return on investment, decreased risk of project failure, faster end-user feedback into the development cycle and increased customer satisfaction). Ability to balance technical debt and new functionality, thereby decreasing technical debt over time.","title":"Benefits of Agile over Traditional Methods"},{"location":"agiletrans/#high-level-differences","text":"","title":"High-Level Differences"},{"location":"agiletrans/#friction-points-with-waterfall","text":"Lack of Ownership - The traditional regulatory environment is based on establishment of fixed requirements, letting the external development team develop the product and then inspecting and validating the product to see if it meets the requirements (tennis match of throwing things back and forth between customers and developers with the assumption that both parties understand the requirements in the same way). -- Recommended Mitigation : The key to any agile methodology is collaboration. A dedicated PO (PO) (can be a government employee or contractor on the business level or on the technical team) with decision making authority or immediate reach-back for those decisions is necessary to support the velocity of agile methodologies in being able to provide value in an ever-changing environment. Lack of Collaboration - Traditional design reviews (Preliminary Design Review / Critical Design Review) currently focus on developers presenting their design results at a fixed point of time after exhaustive analysis. -- Recommended Mitigation : What is needed is mini-collaborative design reviews that are done in such a way that integration elements are identified early enough while allowing additional design elements to be refined as close to the work being done as necessary (based on changes happening constantly - re-work will be generated on designs which are done too early and no longer apply to the current situation). Traditional CDRL formats - The traditional government waterfall process intentionally incurs oversight costs as a risk mitigation strategy to ensure that progress was made by contracted agents. In terms of documentations, the government includes in their Contract Deliverable Requirements List (CDRL) a list of documents which are formatted and generated based on a waterfall development framework. The reviewers of these documents are familiar with what the old contents were, and when reviewing delivered documents expect the same waterfall content which are focused on large immovable designs versus less-detailed more agile enabling designs. -- Recommended Mitigation : Contracts need to be modified up front so that only the necessary CDRLs that provide actual value are included and document deliveries are based on an agile timeline (smaller iterative updates versus large updates for significant milestones). (NOTE: While adequate documentation is necessary - the definition of \"adequate\" needs to be modified to provide timely value as determined by the document owners). See recommended CDRL considerations attachment in Section 3.5. Team and team member performance - Agile is based on team dynamics which take time to coalesce (normally that means there is a start-up period where less physical value is produced in the short-term while establishing the foundation to more rapidly produce value in the long-term). This means that by the straight-line value metrics of traditional project management, the project will appear behind at first. The normal strategy here is to provide more \"waterfall\" elements into the equation to try and \"catch-up\" the project which actually impedes / restricts the capabilities of the team to add value. Then in the end if the blame is placed on the agile system versus on the waterfall regulatory restrictions that were placed on it in order to \"catch it up\". -- Recommended Mitigation : Establish trust and transparency (see Communication Management section) as the team learns together how to implement an agile-based process which is understood and accepted by the government and development team. Include more formalized process to \"ramp up\" new government and contractor team members and their understanding of the system and environments. Uncontrolled change/scope creep versus managed change to provide increased value. Waterfall methodologies focus on a formal change management process in order to manage scope creep. Agile is inherently flexible in nature - it welcomes change based on the need to provide value to an ever-changing reality versus provide the value determined during a snapshot in time planning event which could have taken place months or years previously. However, the issue with agile is this inherent flexibility leads to general requirements which allow for the customer to revise in an ad hoc manner which facilitates uncontrolled scope creep (which is okay unless there is a hard deadline in providing the product based on the initial general requirements). -- Recommended Mitigation : Establish a flexible change management system (this will be based on the amount of trust established by the team). It should be flexible enough to rapidly adapt to the changing reality of what the definition of value is within existing requirements while implementing formal steps to manage scope creep (an example is adding a new requirement / feature versus revising an existing one). Earned value reporting - EV is an attempt to monitor the progress of a project by linking contract to cost to contents - these fixed linkages established at the beginning of the contract are normally difficult to change as the work adapts to reality (I.e. we already reported these features and their value to our superiors and it is too hard to revise - so we would rather use the logic we reported instead of revising that logic to fit reality). This often causes a disconnect between the development team and the contracting team as the metrics based on past logic which EV is measuring does not reflect the evolved reality existing in the agile development environment. -- Recommended Mitigation : Link earned value costs to features (can be based on high-level estimates done during feature driven planning. Conduct final feature refinement (work / story breakdown) as close to the actual development effort as possible (as an example for Scrum - conduct feature refinement 2 sprints out to better reflect reality. Base the EV metrics on the percentage of the features decomposed work items / user stories completed. External testing requirements - external test organizations (including those involved with Development Testing and Evaluation (DT&E), Quality Testing and Evaluation (QT&E), etc) often require advanced information for their test events (examples include the release contents, developers test plan, test cases, conditions, etc. Sometimes up to 270 days prior to a test event). Also, these test events are scheduled at fixed milestones versus being iterative in nature. These two items constrain the flexibility of agile to both react to evolving requirements as well as receive timely feedback from testers to incorporate in current development efforts (waiting until the contents of 6 sprints are released before receiving any feedback on their results - see Extreme Programming (XP) Test Driven Development section for possible practices). -- Recommended Mitigation : External testers need to be integrated into the government / development team to derive the evolution of the requirements in preparation for their external testing. An additional step is to establish an iterative external testing cycle which coincides with the agile framework battle rhythm (rather than conduct annual large testing events). Pure agile theorists - unable to allow for regulatory requirements because they are \"not agile\". One of the final and most difficult problems is not the transition from waterfall to agile of the government, but the inability of agile implementers to allow for the regulatory requirements mandated by the government. Just as a waterfall purist will blame agile for all difficulties encountered, the agile purist will blame all issues on the waterfall regulations imposed. -- Recommended Mitigation : What is necessary is to find the correct hybrid framework between the two extremes that allow the process to work in the most efficient manner possible and also allows buy-in from all team members (the transition from a strictly waterfall to an appropriate hybrid framework may also be iterative in nature).","title":"Friction Points with Waterfall"},{"location":"applyag/","text":"Applying Agile Methods and Mindset Within The Air Force At the inception of a software-based project, the detailed software requirements may be unknown or unknowable, and even if the requirements are known, they usually experience significant changes as the development progresses. To address these evolving requirements issues, agile or iterative development promotes enhanced collaboration between program managers, requirements analysts, testers, the end-user community, and, of course, the software developers. This approach develops software iteratively in short cycles (called \"sprints,\" \"spirals,\" or \"spins\"), and involves frequent testing, user feedback, rapid deliveries, and adaptation to changing requirements. While traditional Waterfall software development was approached via rigorous preplanning to fully specify requirements before building an entire computer program application, Agile software development breaks the project down to provide iterative improvements which also adapt to the evolving environment. This allows government Program Managers to incorporate changed or new requirements in accordance with user needs, thus promoting modular IT contracting. This section focuses on how to incorporate Agile practices into the Air Force acquisition organizations, contracting and the PMO organizations to pro-actively enable an Agile development framework rather than have the framework adapt to a pre-defined waterfall based contracting approach. As this section is predominantly focused on the mindset shift, it will focus on presenting considerations versus prescribing a specific methodology. Agile Contracting Before jumping into the Agile development, PMOs should take time to consider how Agile can benefit their program, what the issues will be, and if perhaps a hybrid approach (combination of Waterfall and Agile) is the best approach. Some of the concepts that need to be considered when embarking on the use of Agile are discussed below. The discussion assumes the government will be contracting with a firm to actually do the development. Since the contractor will be creating the Agile organization structure, it is important the government understands the contractors' Agile organization and how the government interacts within that structure. The better the understanding, the less likely there will be inadvertent roadblocks or obstacles created to impede the progress of the Agile team(s). If the government is doing the development internally, some of the actions may differ and would be accomplished by the government. The following establish some of the key variables which must be considered in the context of enabling an Agile development framework. Acquisition life cycle Team environment End-user access Training and coaching Oversight including milestone reviews, documentation, evaluation (metrics) Rewards and incentives Culture These concepts were actual issues that programs deal with during their use of Agile methods. The concepts discussed here overlap and are intertwined. In many cases, the concepts are mutually reinforcing. Acquisition Life Cycle The acquisition life cycle consists of multiple phases: Materiel Solution Analysis, Technology Development, Engineering and Manufacturing Development, Production & Deployment and Operations & Support. Each of these phases presents unique challenges and opportunities. Some phases lend themselves to the use of Agile better than others. The PMO should determine how to best employ Agile in their program depending on their specific situation. The following paragraphs propose questions to ask and identify issues to consider in building an Agile program. If the PMO is doing a Request for Proposal (RFP), no matter which phase, ensure that the RFP contains language that allows the use of Agile. In many instances, the traditional RFP language makes it difficult, if not impossible, to propose an Agile-based solution. One consideration is the types of reviews and documents required. If the PMO wants to employ Agile, be prepared to allow for Agile style document development, i.e., incremental development of documents and data for reviews that result from the individual iterations and/or releases. This might not seem much different from what the traditional waterfall methods provide but consider the level of detail may be sparser using Agile in the earlier versions of the documents. Even final documents might not contain the amount of detail provided in traditional documents. The key here is not the volume, but the content. A necessary and sufficient criterion is that all important information required for operation and maintenance of the system are supplied. Team Environment Organization structure needs to be established to support an Agile implementation. The context of a program and its inherent organizational structure are related. Many systems contain software and could be considered software intensive but the software is only a small part of the overall system and certainly not the end item being procured. For information systems this is usually not an issue. Due to the size and complexity of most Air force programs, multiple agile iteration teams will be needed. The number is dependent upon the program and in some instances the locations of the contractor team. The larger the number of teams, the more complicated the communications and the greater the need for more users to be involved. In an ideal situation, each agile iteration team would have access to their own dedicated Product Owner. However, that is not practical in the DoD environment so alternatives need to be employed. PMO can consider the use of Product Owner proxies, rotating personnel every x weeks (x usually is two-four weeks), or perhaps a separate - team of subject matter experts (SMEs) accessible by the agile iteration teams as needed. The structure of the overall program team-especially the contractor team-is dependent upon which Agile method is chosen. Agile Scrum, Kanban and XP are just three examples of management practices within Agile methods. Typically, the contractor determines the flavor of Agile. However, the government PMO team needs to be responsive and supportive of that method. Otherwise, using Agile will have less than optimal results. The Agile team also must exhibit behavior reflecting the approach. Seven Extreme Programming (XP) engineering practices have been observed to scale up to enterprise-level Agile development projects and will serve as a foundation for the discussion of Agile contracting. The Define/Build/Test Component. Three basic workflows are combined in the component team: define, build, and test, operating cooperatively within a pre-defined period, known as a time box. The juxtaposition of these skill sets into one team tends to run counter to some conventional methods employed in DoD programs, where these players are often separated by intent. Two-Level Planning. Two-level planning is portrayed as providing both guidance of how software is to be inserted into the operational environment as well as allowing some flexibility to accommodate what is learned during development: The top level of the planning cycle is termed release level planning. This cycle of planning defines series of releases that broadly define capability to be contained in each release. This could be done at the feature set level. The second level of the planning cycle is termed iteration or flow level planning, where work is made ready for development within either a time-boxed iteration or rhythmic workflow approach. Mastering the flow / Iteration. The ability of a team to reliably execute a process flow (Kanban) or sequence of iterations (Scrum / XP) may well be the key behavior that distinguishes a team capable of exploiting Agile techniques in a large organization. If this capability is not present, the likelihood of success is minimal at best. The development iteration or workflow consists of the following key activities: creation of complete, tested, working code implementing a set of features and integration of the developed code into the working baseline. The result is potentially releasable to the user. Producing Smaller and More Frequent Releases. One goal of an agile development framework is the desire for more frequent feedback from the customer and/or stakeholders to avoid large-scale course corrections. The shorter duration of iterations or workflow lead time will help to maintain more or less continuous feedback from the customer. Concurrent Testing. Concurrent testing practices are based upon thorough testing of code both during development and during integration. The goal is that all code is tested. One primary methodology for this is the application of a Test-Driven-Development Approach where the unit tests for software are created prior to the actual code development. DevOps Continuous Integration (CI)/Continuous Delivery (CD) Pipelines. DevOps CI/CD pipelines may well be the most useful and controversial practice advocated in the Agile community. The DevOps CI/CD model diverges from the usual V-shaped model advocated by traditional systems engineering practice employed in DoD programs. In the V-shaped model, requirements synthesis, allocation, and development are carried out in a top-down fashion. This is followed by a bottom-up sequence of integration and verification activities, leading to a product ready for production. DevOps CI/CD pipeline processes are contingent upon the ability to concurrently execute two crucial activities: (1) collect incremental changes from multiple developers on a regular basis, ideally on a daily basis on code check-in, and (2) perform the nightly build discipline, where all changes are brought together in an incremental software baseline, which is in turn compiled and tested with the available automated unit, security, functional and regression test tools. Regular Reflection and Adaptation. Reflection and adaptation (called the Retrospective in Scrum) is the Agile version of continuous process improvement that is highlighted in other quality practices such as CMMI-DEV processes. In keeping with the bottom-up discipline of Agile approaches, this introspection is driven down to the individual team level. Contracting Consideration Checklist Procure the repeatable process for the delivery of functional products Contractual Requirements should be the scope, period of performance, and price. The technical execution of the project should be at the discretion of the Product Owner Enhancement and fixes should be owned by the same team Contract Types: Fixed Price per iteration is good for the procurement of the process for an entire team but the current DoD acquisition process does not support short-term contract changes Time and Materials is ideal for the procurement of time of required skill sets but the risk is entirely on the government A preferred type which enables agile development is a \"Rent the Factory\" type contract: Establish contract to resource (\"rent\") a team for a specified time period from a contractor Control change through PMO management of the Product Backlog Implement within contract incremental options for extension to decrease government risk (off-ramp for lack of performance) Provide reward incentives for excellence in performance Agile Organization, Roles, and Responsibilities - Stakeholder Level One addition to the typical traditional Air Force PMO organization is an Agile Coach. As described in the previous training and coaching section, the Agile Coach is someone who can provide real-time answers for the immediate Agile issue. Another addition to the typical PMO staff is an end-user representative, the PO, who is empowered to work with the contractors' agile development team and make decisions that are binding for the development. Given the nature of government contracting, care must be taken to ensure that the PO user representative has the legal authority to direct the contractor. We can envision a situation where constructive change could become an issue. Another addition to the PMO is a DevSecOps Lead who works with the with contractor engineering support teams that may be divided into two segments: Continuous Integration Team and Continuous Delivery/Deployment Team to implement configuration management, version control, automated build, automated security testing, automated functional testing and regression testing. The government needs skilled Agile personnel to review the documentation and understand how the Agile software development approach works. Many traditional PMO teams do not have software representatives experienced with modern software development approaches. That could be more problematic in an Agile environment, where any shortfalls quickly become more visible. Another challenge is keeping high-performing Agile teams together long enough for them to achieve peak performance. This is a challenge because developers can change at the end of a contractual period of performance. The continuity of an Agile team enhances the tacit knowledge of the program and this improves overall performance. One recommendation might be to look at is putting key Agile technical leads into the PMO under a separate contract vehicle or hire them to work for the government PMO organization itself. Stakeholder Consideration Checklist: Empower the Product Owner to make technical decisions Provide regular feedback to stakeholders demonstrating progress Maintain a short feedback loop with users Align with external organizations Testing Configuration Project Management This section describes how project management practices need to be adjusted in support of Agile projects by first identifying common Agile practices and then describing how these management practices work in terms of scope, schedule and cost baselines for the project work. Planning An integrated project management plan (PMP) is developed for the Agile project to define the basis of all project work and how the work will be performed. It describes how the project will be executed, monitored, control and closed. From the Agile perspective, the performance measurement baseline is an integrated scope, schedule, and cost baseline for the software release project work maintained in the Product Backlog against which project execution metrics are used to measure and manage performance. The PMP describes the series of phases (themes, initiatives, and epics) the project passes through from initiation to closure. The PMP also describes the Agile development management approach; i.e. Agile iteration-based (Scrum/XP), flow-based (Kanban) or a hybrid model. Figure xx describes the hierarchal structure of the Agile project work effort. Notice that this view of the project work hierarchy is similar to the WBS in predictive (Waterfall) projects. Being Agile and embracing work hierarchy structure are not mutually exclusive and the work structure described here is not one size fits all. To achieve success, project organizations will adapt these work structures to the needs of their program, including: software release frequency, release size (major, minor or small sustainment software delivery of a bug fix/patch) or quick implementation of a capability/feature to support an urgent warfighter need. One additional consideration is that the above hierarchy promotes a multi-team or \"scaled\" agile approach. While methodologies exist to support the scaling of agile (i.e. Scaled Agile Framework (SAFe), Scrum of Scrums, Disciplined Agile Delivery (DAD), etc), these will not be presented in this playbook but are a topic for further elaboration as an organization's agile process matures. Scope In Agile projects the requirements are defined by the organization's stakeholders and Product Owner with support from the Agile Team in the form of Epics, Features, user stories or PBIs that are maintained in the Product Backlog. Therefore, the project scope for an Agile project begins with the organization's governance process which commonly consists of a Configuration Control Board (CCB) that produces a high-level product backlog for a release consisting of a list of approved requirements defined in the form of epics, features and sometimes high-level PBIs. The product owner then works with the Agile Inception Team to prioritize these items (epics, features, PBIs if applicable). The PMO can initially use the MoSCoW (Must Have, Should Have, Could Have, Won't Have this time) method to prioritize requirements. The initial Product Backlog items are divided into 'must haves', 'should haves', 'could haves' & 'won't have': The items with highest business value, and lowest effort involved, are often the items that qualify the 'must haves' criteria. The items that are of higher priority, and will need some effort to be delivered, are deemed, as 'should haves'. All the backlog items that might be desirable in terms of scope, but are of lower business value are segmented, as 'could haves'. The items that are agreed upon to be moved to later releases, are filtered out as 'won't haves' for now. Forecasting Schedule and Cost Once the user stories and PBIs in the product backlog are defined, prioritized and the MVP determined, Agile estimating techniques can be applied to estimate the effort for each feature, sum up the effort for all the features in a project as well as determine which features would be part of which release. The PMO and development team are then able to forecast a schedule and cost for the release project. There are several gross-level estimation techniques used by teams using agile approaches such as Scrum, Kanban, and eXtreme Programming which include T-shirt Sizes (for Features), and Affinity Mapping. T-Shirt Sizes . This estimation technique can be applied when providing a quick and rough estimation to a project feature. Here, the features are estimated in T-shirt sizes, ranging from XS to XL, which would be later converted to numbers, as per requirements. In this type of estimation, the estimators assign a size to each of the features. Points are assigned to the each of the T-Shirt Sizes using the Fibonacci-like format: 0, 1, 2, 3, 5, 8, 13, 20, 40, 100. These points are summed up and based on a rough estimate of how many feature points can get done within a time period by a normal agile team (note, the more detailed the refinement, the better the estimates). Cost The cost for the release is estimated by using the team's iteration average cost and multiplying it by the number of iterations estimated to complete the backlog. For example, the following formula to determine budgeted cost can demonstrate this estimation for the above example: (Team monthly cost (example: $15,000.00 per month) multiplied by the number of months/iterations (example: 5 months) = $75,000.00 + other expenses = forecast budgeted cost. The above example is utterly simplistic and does not take into account the following factors: The Inception phase at the beginning that is required to develop the product backlog, estimate the size in story points and develop an architecture vision; Changes in scope during the Construction iterations caused by adding new features driven by urgent business needs or Cybersecurity issues; A Transition phase at the end of development for Government Acceptance Tests and Security Tests required to achieve customer acceptance and Authority to Operate (AtO) for deployment; Many other variables such as Cloud Migration and implementation of a DevSecOps reference model. Project Management Consideration Checklist The project manager removes ensures funding, organizes stakeholder interactions and keeps the team from being distracted Work in increments. Buy, build, and fail small. Make proceed and pivot decisions regularly. Learn from mistakes but don't punish the people Leverage the efficiency of commercial contracting methods. If and when possible, use services and tools sold by private sector vendors. Use living roadmaps not fixed Integrated master schedules Agile CDRLs and delivery Overview One of the four agile manifesto values is that \"working products are valued over comprehensive documentation\". Many times this is viewed by the agile purist as a justification for not doing documentation. However, even in agile, there is a value for doing documentation. Documentation exists to support the development teams work in creating the product and supporting the product after release. Prior to looking deeper at agile content and delivery recommendations for CDRLs, here are some general considerations to keep in mind when determining the format, content, and delivery schedule for CDRLs within an agile framework - \"Just in time\" - a. Document late (based on design completion) - Consolidate deliverable design documentation as late as possible (though can be iteratively updated) - better to have the stable concepts versus speculative ideas which are constantly changing as part of the agile framework and would require constant document revisions and submissions. b. Document continuously (based on iteration) - iteratively update development related documentation (i.e. user guides) in parallel with development efforts to not lose critical ideas. A key concept here is the idea of a living document, which is discussed below. \"Just sufficient\" - Sufficiency is defined by the document owner (provide the necessary useful documentation elements). Additional thoughts: a. Provide the fewest CDRLs possible with the least amount of overlap (I.e. considering combining the Interface Requirements Specification (IRS) with the Interface Design Description IDD). b. Better communication means less documentation (collaboration is key to agile - often a conversation between engineers can eliminate the need for a staffing document). c. Working software does not eliminate the need for documentation - the software delivered still needs to be improved, operated and maintained in the future - documentation's value is transferring product knowledge gained in development to users, operators and maintainers or to new development personnel when contracts change. \"NOT Just Because\" - Treat documentation as any other requirement that needs to be justified by the government document owner (since resources will need to be allocated to produce it). Documentation work efforts can then be prioritized within the product backlog based on the value it provides. Agile CDRL Content Considerations Agile is built to be fast and flexible, and the contents of the CDRLs must be able to keep up with this development framework. CDRLs should not be an after-thought - they must be incorporated into the process. In other words, we don't want big CDRLs that are out of date by the time they are published. We need documents which can be frequently updated based on the ongoing iterative development efforts. Updates for CDRLs should be provided incrementally by the team when it is fresh in their mind, versus producing documentation at the end of the release when much of the valuable information has already been forgotten. In the military, this is a mindset switch. Agile CDRL Delivery Consideration In order to maintain the current value of CDRLs, these documents should be flexible enough to keep up with an iterative update approach (versus long periods of time between updates). In that case, the best methodology is to establish a system to enable CDRLs as \"living documents\". This can best be enabled by re-thinking the methodology of delivery for CDRLs. By considering alternate digital delivery methodologies, CDRLs can be more quickly updated and maintain their relevance throughout the agile development process. One final note to this section is while Sharepoint or a shared drive may fulfill the CDRL requirements above, a further shift from the traditional mindset is to provide appropriate dashboards or reports within an existing system to provide the CDRL information requirements. An example of this is the Test Descriptions / Scripts. Executable test cases are normally already stored in a digital format within the test management software. CDRL Recommended Modifications Attachment The following link is to an attachment which provides a more detailed list of CDRLs normally associated with a software development project. The list contains the associated DID, waterfall description, agile recommended modifications, and normal delivery timelines (i.e. are the documents delivered one time for the project, at specified design reviews, with a delivery, or on an as needed basis. Measuring Agile Delivery, KPIs, and Metrics - Status Reporting In Agile, the system always runs, thus Agile metrics are empirical and business value-based measurements instead of predictive measurements such as the performance measurement baseline and earned value that are used in traditional Waterfall. Agile metrics measure what the Agile Team delivers, not what the team predicts it will deliver. Project teams use this data for improved schedule and cost forecasts as well as for surfacing problems and issues that the Agile Team can diagnose and address. The metrics described below address Team Metrics, Program Metrics and Portfolio Metrics. These metrics were derived from the Project Management Institute, Inc. Agile Practice Guide, SAFe Metrics, DAD, and Atlassian web sites. Scrum Metrics Sprint burndown. Scrum teams organize development into time-boxed sprint iterations. At the outset of the sprint, the team forecasts how many story points they can finish during a sprint. A sprint burndown report (Figure xx) then tracks the completion of work during the sprint. The x-axis represents time, and the y-axis refers to the amount of story points left to complete. The goal is to have all the forecasted work completed by the end of the sprint. A team that consistently meets its forecast is a compelling advertisement for Agile in their organization, however, it may be too good to be true if the team is inflating the numbers by declaring an item complete before it really is. In the long run cheating hampers learning and improvement. There are several anti-patterns to watch for in team performance: 1. The team finishes early sprint after sprint because they aren't committing to enough work in the sprint backlog. 2. The team misses their forecast sprint after sprint because they're committing to too much work. 3. The burndown line makes steep drops rather than a more gradual burndown because the work hasn't been broken down into granular user stories or PBIs. 4. The product owner adds PBIs or changes the scope mid-sprint. Velocity Velocity is the average amount of work a Scrum team completes during a sprint, measured in story points and we used it in the example from the prior section to forecast a release schedule. The product owner can use velocity to predict how quickly a team can work through the product backlog, since the velocity chart report tracks the forecasted and completed work over several iteration-the more iterations, the more accurate the forecast. Each team's velocity is unique. If team A has a velocity of 25 story points and team B has a velocity of 50 story points, it doesn't mean that team B has higher throughput. Because each team's story point estimation technique is unique, their sprint velocity will be as well. Organizations should resist the temptation to compare velocity across teams. Instead, Program Management should measure the level of effort and output of work based on each team's unique interpretation of story points. Kanban Metrics Team Kanban Board Flow-based Agile Teams using Kanban methods and Kanban Boards need to use different measurements like work in progress, lead time for delivery of a feature to customer, cycle time for completion of a task on the Kanban Board, and response time - the amount of time the item waits until work begins. Figure xx shows an example of an Agile team's initial Kanban board, which captures their current workflow states: analyze, review, build, and integrate and test. After defining the initial process and Work in Process (WIP) limits and executing for a while, the Kanban team's bottlenecks should surface. If this is the case, the Kanban Team refines the workflow process step where the bottleneck occurred or reduces some WIP limits until it becomes evident that a workflow state is 'starving' or is too full. In this manner the Kanban Team continually adjusts the process workflows to optimize their flow. For example, changing WIP limits and merging, splitting, or redefining workflow states. Cumulative Flow Diagram The cumulative flow diagram is a key resource for Kanban teams, helping them ensure the flow of work across the team is consistent. With number of issues on the Y axis, time on the X axis, and colors to indicate the various workflow states, it visually points out shortages and bottlenecks and works in conjunction with Work in Process (WIP) limits. The cumulative flow diagram should look smooth(ish) from left to right. Bubbles or gaps in any one color indicate shortages and bottlenecks, so when the Agile Team sees one, they should look for ways to smooth out color bands across the chart. Anti-patterns to look for are: - Blocking issues create large backups in some parts of the process and starvation in others. - Unchecked backlog growth over time. This results from product owners not closing issues that are obsolete or simply too low in priority to ever be pulled in. Measuring cycle time is an efficient and flexible way to improve a team's processes because the results of changes are discernable almost immediately, allowing them to make any further adjustments right away. The end goal is to have a consistent and short cycle time, regardless of the type of work (new feature, technical debt, etc. Here are two areas to watch out for: - Increasing cycle time - Increasing cycle time is a negative trend which should be addressed in the Operations Review. One exception: if the team's definition of done has expanded, cycle time will probably expand too. - Erratic cycle time - The goal is to have consistent cycle time for work items which have similar story point values. Filter the control chart for each story point value to check for consistency. If cycle time is erratic on small and large story point values, spend time in the Operations Review discussing how to improve estimates.","title":"-Applying Agile Methods and Mindset Within The Air Force"},{"location":"applyag/#applying-agile-methods-and-mindset-within-the-air-force","text":"At the inception of a software-based project, the detailed software requirements may be unknown or unknowable, and even if the requirements are known, they usually experience significant changes as the development progresses. To address these evolving requirements issues, agile or iterative development promotes enhanced collaboration between program managers, requirements analysts, testers, the end-user community, and, of course, the software developers. This approach develops software iteratively in short cycles (called \"sprints,\" \"spirals,\" or \"spins\"), and involves frequent testing, user feedback, rapid deliveries, and adaptation to changing requirements. While traditional Waterfall software development was approached via rigorous preplanning to fully specify requirements before building an entire computer program application, Agile software development breaks the project down to provide iterative improvements which also adapt to the evolving environment. This allows government Program Managers to incorporate changed or new requirements in accordance with user needs, thus promoting modular IT contracting. This section focuses on how to incorporate Agile practices into the Air Force acquisition organizations, contracting and the PMO organizations to pro-actively enable an Agile development framework rather than have the framework adapt to a pre-defined waterfall based contracting approach. As this section is predominantly focused on the mindset shift, it will focus on presenting considerations versus prescribing a specific methodology.","title":"Applying Agile Methods and Mindset Within The Air Force"},{"location":"applyag/#agile-contracting","text":"Before jumping into the Agile development, PMOs should take time to consider how Agile can benefit their program, what the issues will be, and if perhaps a hybrid approach (combination of Waterfall and Agile) is the best approach. Some of the concepts that need to be considered when embarking on the use of Agile are discussed below. The discussion assumes the government will be contracting with a firm to actually do the development. Since the contractor will be creating the Agile organization structure, it is important the government understands the contractors' Agile organization and how the government interacts within that structure. The better the understanding, the less likely there will be inadvertent roadblocks or obstacles created to impede the progress of the Agile team(s). If the government is doing the development internally, some of the actions may differ and would be accomplished by the government. The following establish some of the key variables which must be considered in the context of enabling an Agile development framework. Acquisition life cycle Team environment End-user access Training and coaching Oversight including milestone reviews, documentation, evaluation (metrics) Rewards and incentives Culture These concepts were actual issues that programs deal with during their use of Agile methods. The concepts discussed here overlap and are intertwined. In many cases, the concepts are mutually reinforcing.","title":"Agile Contracting"},{"location":"applyag/#acquisition-life-cycle","text":"The acquisition life cycle consists of multiple phases: Materiel Solution Analysis, Technology Development, Engineering and Manufacturing Development, Production & Deployment and Operations & Support. Each of these phases presents unique challenges and opportunities. Some phases lend themselves to the use of Agile better than others. The PMO should determine how to best employ Agile in their program depending on their specific situation. The following paragraphs propose questions to ask and identify issues to consider in building an Agile program. If the PMO is doing a Request for Proposal (RFP), no matter which phase, ensure that the RFP contains language that allows the use of Agile. In many instances, the traditional RFP language makes it difficult, if not impossible, to propose an Agile-based solution. One consideration is the types of reviews and documents required. If the PMO wants to employ Agile, be prepared to allow for Agile style document development, i.e., incremental development of documents and data for reviews that result from the individual iterations and/or releases. This might not seem much different from what the traditional waterfall methods provide but consider the level of detail may be sparser using Agile in the earlier versions of the documents. Even final documents might not contain the amount of detail provided in traditional documents. The key here is not the volume, but the content. A necessary and sufficient criterion is that all important information required for operation and maintenance of the system are supplied.","title":"Acquisition Life Cycle"},{"location":"applyag/#team-environment","text":"Organization structure needs to be established to support an Agile implementation. The context of a program and its inherent organizational structure are related. Many systems contain software and could be considered software intensive but the software is only a small part of the overall system and certainly not the end item being procured. For information systems this is usually not an issue. Due to the size and complexity of most Air force programs, multiple agile iteration teams will be needed. The number is dependent upon the program and in some instances the locations of the contractor team. The larger the number of teams, the more complicated the communications and the greater the need for more users to be involved. In an ideal situation, each agile iteration team would have access to their own dedicated Product Owner. However, that is not practical in the DoD environment so alternatives need to be employed. PMO can consider the use of Product Owner proxies, rotating personnel every x weeks (x usually is two-four weeks), or perhaps a separate - team of subject matter experts (SMEs) accessible by the agile iteration teams as needed. The structure of the overall program team-especially the contractor team-is dependent upon which Agile method is chosen. Agile Scrum, Kanban and XP are just three examples of management practices within Agile methods. Typically, the contractor determines the flavor of Agile. However, the government PMO team needs to be responsive and supportive of that method. Otherwise, using Agile will have less than optimal results. The Agile team also must exhibit behavior reflecting the approach. Seven Extreme Programming (XP) engineering practices have been observed to scale up to enterprise-level Agile development projects and will serve as a foundation for the discussion of Agile contracting. The Define/Build/Test Component. Three basic workflows are combined in the component team: define, build, and test, operating cooperatively within a pre-defined period, known as a time box. The juxtaposition of these skill sets into one team tends to run counter to some conventional methods employed in DoD programs, where these players are often separated by intent. Two-Level Planning. Two-level planning is portrayed as providing both guidance of how software is to be inserted into the operational environment as well as allowing some flexibility to accommodate what is learned during development: The top level of the planning cycle is termed release level planning. This cycle of planning defines series of releases that broadly define capability to be contained in each release. This could be done at the feature set level. The second level of the planning cycle is termed iteration or flow level planning, where work is made ready for development within either a time-boxed iteration or rhythmic workflow approach. Mastering the flow / Iteration. The ability of a team to reliably execute a process flow (Kanban) or sequence of iterations (Scrum / XP) may well be the key behavior that distinguishes a team capable of exploiting Agile techniques in a large organization. If this capability is not present, the likelihood of success is minimal at best. The development iteration or workflow consists of the following key activities: creation of complete, tested, working code implementing a set of features and integration of the developed code into the working baseline. The result is potentially releasable to the user. Producing Smaller and More Frequent Releases. One goal of an agile development framework is the desire for more frequent feedback from the customer and/or stakeholders to avoid large-scale course corrections. The shorter duration of iterations or workflow lead time will help to maintain more or less continuous feedback from the customer. Concurrent Testing. Concurrent testing practices are based upon thorough testing of code both during development and during integration. The goal is that all code is tested. One primary methodology for this is the application of a Test-Driven-Development Approach where the unit tests for software are created prior to the actual code development. DevOps Continuous Integration (CI)/Continuous Delivery (CD) Pipelines. DevOps CI/CD pipelines may well be the most useful and controversial practice advocated in the Agile community. The DevOps CI/CD model diverges from the usual V-shaped model advocated by traditional systems engineering practice employed in DoD programs. In the V-shaped model, requirements synthesis, allocation, and development are carried out in a top-down fashion. This is followed by a bottom-up sequence of integration and verification activities, leading to a product ready for production. DevOps CI/CD pipeline processes are contingent upon the ability to concurrently execute two crucial activities: (1) collect incremental changes from multiple developers on a regular basis, ideally on a daily basis on code check-in, and (2) perform the nightly build discipline, where all changes are brought together in an incremental software baseline, which is in turn compiled and tested with the available automated unit, security, functional and regression test tools. Regular Reflection and Adaptation. Reflection and adaptation (called the Retrospective in Scrum) is the Agile version of continuous process improvement that is highlighted in other quality practices such as CMMI-DEV processes. In keeping with the bottom-up discipline of Agile approaches, this introspection is driven down to the individual team level.","title":"Team Environment"},{"location":"applyag/#contracting-consideration-checklist","text":"Procure the repeatable process for the delivery of functional products Contractual Requirements should be the scope, period of performance, and price. The technical execution of the project should be at the discretion of the Product Owner Enhancement and fixes should be owned by the same team Contract Types: Fixed Price per iteration is good for the procurement of the process for an entire team but the current DoD acquisition process does not support short-term contract changes Time and Materials is ideal for the procurement of time of required skill sets but the risk is entirely on the government A preferred type which enables agile development is a \"Rent the Factory\" type contract: Establish contract to resource (\"rent\") a team for a specified time period from a contractor Control change through PMO management of the Product Backlog Implement within contract incremental options for extension to decrease government risk (off-ramp for lack of performance) Provide reward incentives for excellence in performance","title":"Contracting Consideration Checklist"},{"location":"applyag/#agile-organization-roles-and-responsibilities-stakeholder-level","text":"One addition to the typical traditional Air Force PMO organization is an Agile Coach. As described in the previous training and coaching section, the Agile Coach is someone who can provide real-time answers for the immediate Agile issue. Another addition to the typical PMO staff is an end-user representative, the PO, who is empowered to work with the contractors' agile development team and make decisions that are binding for the development. Given the nature of government contracting, care must be taken to ensure that the PO user representative has the legal authority to direct the contractor. We can envision a situation where constructive change could become an issue. Another addition to the PMO is a DevSecOps Lead who works with the with contractor engineering support teams that may be divided into two segments: Continuous Integration Team and Continuous Delivery/Deployment Team to implement configuration management, version control, automated build, automated security testing, automated functional testing and regression testing. The government needs skilled Agile personnel to review the documentation and understand how the Agile software development approach works. Many traditional PMO teams do not have software representatives experienced with modern software development approaches. That could be more problematic in an Agile environment, where any shortfalls quickly become more visible. Another challenge is keeping high-performing Agile teams together long enough for them to achieve peak performance. This is a challenge because developers can change at the end of a contractual period of performance. The continuity of an Agile team enhances the tacit knowledge of the program and this improves overall performance. One recommendation might be to look at is putting key Agile technical leads into the PMO under a separate contract vehicle or hire them to work for the government PMO organization itself.","title":"Agile Organization, Roles, and Responsibilities - Stakeholder Level"},{"location":"applyag/#stakeholder-consideration-checklist","text":"Empower the Product Owner to make technical decisions Provide regular feedback to stakeholders demonstrating progress Maintain a short feedback loop with users Align with external organizations Testing Configuration","title":"Stakeholder Consideration Checklist:"},{"location":"applyag/#project-management","text":"This section describes how project management practices need to be adjusted in support of Agile projects by first identifying common Agile practices and then describing how these management practices work in terms of scope, schedule and cost baselines for the project work.","title":"Project Management"},{"location":"applyag/#planning","text":"An integrated project management plan (PMP) is developed for the Agile project to define the basis of all project work and how the work will be performed. It describes how the project will be executed, monitored, control and closed. From the Agile perspective, the performance measurement baseline is an integrated scope, schedule, and cost baseline for the software release project work maintained in the Product Backlog against which project execution metrics are used to measure and manage performance. The PMP describes the series of phases (themes, initiatives, and epics) the project passes through from initiation to closure. The PMP also describes the Agile development management approach; i.e. Agile iteration-based (Scrum/XP), flow-based (Kanban) or a hybrid model. Figure xx describes the hierarchal structure of the Agile project work effort. Notice that this view of the project work hierarchy is similar to the WBS in predictive (Waterfall) projects. Being Agile and embracing work hierarchy structure are not mutually exclusive and the work structure described here is not one size fits all. To achieve success, project organizations will adapt these work structures to the needs of their program, including: software release frequency, release size (major, minor or small sustainment software delivery of a bug fix/patch) or quick implementation of a capability/feature to support an urgent warfighter need. One additional consideration is that the above hierarchy promotes a multi-team or \"scaled\" agile approach. While methodologies exist to support the scaling of agile (i.e. Scaled Agile Framework (SAFe), Scrum of Scrums, Disciplined Agile Delivery (DAD), etc), these will not be presented in this playbook but are a topic for further elaboration as an organization's agile process matures.","title":"Planning"},{"location":"applyag/#scope","text":"In Agile projects the requirements are defined by the organization's stakeholders and Product Owner with support from the Agile Team in the form of Epics, Features, user stories or PBIs that are maintained in the Product Backlog. Therefore, the project scope for an Agile project begins with the organization's governance process which commonly consists of a Configuration Control Board (CCB) that produces a high-level product backlog for a release consisting of a list of approved requirements defined in the form of epics, features and sometimes high-level PBIs. The product owner then works with the Agile Inception Team to prioritize these items (epics, features, PBIs if applicable). The PMO can initially use the MoSCoW (Must Have, Should Have, Could Have, Won't Have this time) method to prioritize requirements. The initial Product Backlog items are divided into 'must haves', 'should haves', 'could haves' & 'won't have': The items with highest business value, and lowest effort involved, are often the items that qualify the 'must haves' criteria. The items that are of higher priority, and will need some effort to be delivered, are deemed, as 'should haves'. All the backlog items that might be desirable in terms of scope, but are of lower business value are segmented, as 'could haves'. The items that are agreed upon to be moved to later releases, are filtered out as 'won't haves' for now.","title":"Scope"},{"location":"applyag/#forecasting-schedule-and-cost","text":"Once the user stories and PBIs in the product backlog are defined, prioritized and the MVP determined, Agile estimating techniques can be applied to estimate the effort for each feature, sum up the effort for all the features in a project as well as determine which features would be part of which release. The PMO and development team are then able to forecast a schedule and cost for the release project. There are several gross-level estimation techniques used by teams using agile approaches such as Scrum, Kanban, and eXtreme Programming which include T-shirt Sizes (for Features), and Affinity Mapping. T-Shirt Sizes . This estimation technique can be applied when providing a quick and rough estimation to a project feature. Here, the features are estimated in T-shirt sizes, ranging from XS to XL, which would be later converted to numbers, as per requirements. In this type of estimation, the estimators assign a size to each of the features. Points are assigned to the each of the T-Shirt Sizes using the Fibonacci-like format: 0, 1, 2, 3, 5, 8, 13, 20, 40, 100. These points are summed up and based on a rough estimate of how many feature points can get done within a time period by a normal agile team (note, the more detailed the refinement, the better the estimates).","title":"Forecasting Schedule and Cost"},{"location":"applyag/#cost","text":"The cost for the release is estimated by using the team's iteration average cost and multiplying it by the number of iterations estimated to complete the backlog. For example, the following formula to determine budgeted cost can demonstrate this estimation for the above example: (Team monthly cost (example: $15,000.00 per month) multiplied by the number of months/iterations (example: 5 months) = $75,000.00 + other expenses = forecast budgeted cost. The above example is utterly simplistic and does not take into account the following factors: The Inception phase at the beginning that is required to develop the product backlog, estimate the size in story points and develop an architecture vision; Changes in scope during the Construction iterations caused by adding new features driven by urgent business needs or Cybersecurity issues; A Transition phase at the end of development for Government Acceptance Tests and Security Tests required to achieve customer acceptance and Authority to Operate (AtO) for deployment; Many other variables such as Cloud Migration and implementation of a DevSecOps reference model.","title":"Cost"},{"location":"applyag/#project-management-consideration-checklist","text":"The project manager removes ensures funding, organizes stakeholder interactions and keeps the team from being distracted Work in increments. Buy, build, and fail small. Make proceed and pivot decisions regularly. Learn from mistakes but don't punish the people Leverage the efficiency of commercial contracting methods. If and when possible, use services and tools sold by private sector vendors. Use living roadmaps not fixed Integrated master schedules","title":"Project Management Consideration Checklist"},{"location":"applyag/#agile-cdrls-and-delivery","text":"","title":"Agile CDRLs and delivery"},{"location":"applyag/#overview","text":"One of the four agile manifesto values is that \"working products are valued over comprehensive documentation\". Many times this is viewed by the agile purist as a justification for not doing documentation. However, even in agile, there is a value for doing documentation. Documentation exists to support the development teams work in creating the product and supporting the product after release. Prior to looking deeper at agile content and delivery recommendations for CDRLs, here are some general considerations to keep in mind when determining the format, content, and delivery schedule for CDRLs within an agile framework - \"Just in time\" - a. Document late (based on design completion) - Consolidate deliverable design documentation as late as possible (though can be iteratively updated) - better to have the stable concepts versus speculative ideas which are constantly changing as part of the agile framework and would require constant document revisions and submissions. b. Document continuously (based on iteration) - iteratively update development related documentation (i.e. user guides) in parallel with development efforts to not lose critical ideas. A key concept here is the idea of a living document, which is discussed below. \"Just sufficient\" - Sufficiency is defined by the document owner (provide the necessary useful documentation elements). Additional thoughts: a. Provide the fewest CDRLs possible with the least amount of overlap (I.e. considering combining the Interface Requirements Specification (IRS) with the Interface Design Description IDD). b. Better communication means less documentation (collaboration is key to agile - often a conversation between engineers can eliminate the need for a staffing document). c. Working software does not eliminate the need for documentation - the software delivered still needs to be improved, operated and maintained in the future - documentation's value is transferring product knowledge gained in development to users, operators and maintainers or to new development personnel when contracts change. \"NOT Just Because\" - Treat documentation as any other requirement that needs to be justified by the government document owner (since resources will need to be allocated to produce it). Documentation work efforts can then be prioritized within the product backlog based on the value it provides.","title":"Overview"},{"location":"applyag/#agile-cdrl-content-considerations","text":"Agile is built to be fast and flexible, and the contents of the CDRLs must be able to keep up with this development framework. CDRLs should not be an after-thought - they must be incorporated into the process. In other words, we don't want big CDRLs that are out of date by the time they are published. We need documents which can be frequently updated based on the ongoing iterative development efforts. Updates for CDRLs should be provided incrementally by the team when it is fresh in their mind, versus producing documentation at the end of the release when much of the valuable information has already been forgotten. In the military, this is a mindset switch.","title":"Agile CDRL Content Considerations"},{"location":"applyag/#agile-cdrl-delivery-consideration","text":"In order to maintain the current value of CDRLs, these documents should be flexible enough to keep up with an iterative update approach (versus long periods of time between updates). In that case, the best methodology is to establish a system to enable CDRLs as \"living documents\". This can best be enabled by re-thinking the methodology of delivery for CDRLs. By considering alternate digital delivery methodologies, CDRLs can be more quickly updated and maintain their relevance throughout the agile development process. One final note to this section is while Sharepoint or a shared drive may fulfill the CDRL requirements above, a further shift from the traditional mindset is to provide appropriate dashboards or reports within an existing system to provide the CDRL information requirements. An example of this is the Test Descriptions / Scripts. Executable test cases are normally already stored in a digital format within the test management software. CDRL Recommended Modifications Attachment The following link is to an attachment which provides a more detailed list of CDRLs normally associated with a software development project. The list contains the associated DID, waterfall description, agile recommended modifications, and normal delivery timelines (i.e. are the documents delivered one time for the project, at specified design reviews, with a delivery, or on an as needed basis.","title":"Agile CDRL Delivery Consideration"},{"location":"applyag/#measuring-agile-delivery-kpis-and-metrics-status-reporting","text":"In Agile, the system always runs, thus Agile metrics are empirical and business value-based measurements instead of predictive measurements such as the performance measurement baseline and earned value that are used in traditional Waterfall. Agile metrics measure what the Agile Team delivers, not what the team predicts it will deliver. Project teams use this data for improved schedule and cost forecasts as well as for surfacing problems and issues that the Agile Team can diagnose and address. The metrics described below address Team Metrics, Program Metrics and Portfolio Metrics. These metrics were derived from the Project Management Institute, Inc. Agile Practice Guide, SAFe Metrics, DAD, and Atlassian web sites. Scrum Metrics Sprint burndown. Scrum teams organize development into time-boxed sprint iterations. At the outset of the sprint, the team forecasts how many story points they can finish during a sprint. A sprint burndown report (Figure xx) then tracks the completion of work during the sprint. The x-axis represents time, and the y-axis refers to the amount of story points left to complete. The goal is to have all the forecasted work completed by the end of the sprint. A team that consistently meets its forecast is a compelling advertisement for Agile in their organization, however, it may be too good to be true if the team is inflating the numbers by declaring an item complete before it really is. In the long run cheating hampers learning and improvement. There are several anti-patterns to watch for in team performance: 1. The team finishes early sprint after sprint because they aren't committing to enough work in the sprint backlog. 2. The team misses their forecast sprint after sprint because they're committing to too much work. 3. The burndown line makes steep drops rather than a more gradual burndown because the work hasn't been broken down into granular user stories or PBIs. 4. The product owner adds PBIs or changes the scope mid-sprint. Velocity Velocity is the average amount of work a Scrum team completes during a sprint, measured in story points and we used it in the example from the prior section to forecast a release schedule. The product owner can use velocity to predict how quickly a team can work through the product backlog, since the velocity chart report tracks the forecasted and completed work over several iteration-the more iterations, the more accurate the forecast. Each team's velocity is unique. If team A has a velocity of 25 story points and team B has a velocity of 50 story points, it doesn't mean that team B has higher throughput. Because each team's story point estimation technique is unique, their sprint velocity will be as well. Organizations should resist the temptation to compare velocity across teams. Instead, Program Management should measure the level of effort and output of work based on each team's unique interpretation of story points. Kanban Metrics Team Kanban Board Flow-based Agile Teams using Kanban methods and Kanban Boards need to use different measurements like work in progress, lead time for delivery of a feature to customer, cycle time for completion of a task on the Kanban Board, and response time - the amount of time the item waits until work begins. Figure xx shows an example of an Agile team's initial Kanban board, which captures their current workflow states: analyze, review, build, and integrate and test. After defining the initial process and Work in Process (WIP) limits and executing for a while, the Kanban team's bottlenecks should surface. If this is the case, the Kanban Team refines the workflow process step where the bottleneck occurred or reduces some WIP limits until it becomes evident that a workflow state is 'starving' or is too full. In this manner the Kanban Team continually adjusts the process workflows to optimize their flow. For example, changing WIP limits and merging, splitting, or redefining workflow states. Cumulative Flow Diagram The cumulative flow diagram is a key resource for Kanban teams, helping them ensure the flow of work across the team is consistent. With number of issues on the Y axis, time on the X axis, and colors to indicate the various workflow states, it visually points out shortages and bottlenecks and works in conjunction with Work in Process (WIP) limits. The cumulative flow diagram should look smooth(ish) from left to right. Bubbles or gaps in any one color indicate shortages and bottlenecks, so when the Agile Team sees one, they should look for ways to smooth out color bands across the chart. Anti-patterns to look for are: - Blocking issues create large backups in some parts of the process and starvation in others. - Unchecked backlog growth over time. This results from product owners not closing issues that are obsolete or simply too low in priority to ever be pulled in. Measuring cycle time is an efficient and flexible way to improve a team's processes because the results of changes are discernable almost immediately, allowing them to make any further adjustments right away. The end goal is to have a consistent and short cycle time, regardless of the type of work (new feature, technical debt, etc. Here are two areas to watch out for: - Increasing cycle time - Increasing cycle time is a negative trend which should be addressed in the Operations Review. One exception: if the team's definition of done has expanded, cycle time will probably expand too. - Erratic cycle time - The goal is to have consistent cycle time for work items which have similar story point values. Filter the control chart for each story point value to check for consistency. If cycle time is erratic on small and large story point values, spend time in the Operations Review discussing how to improve estimates.","title":"Measuring Agile Delivery, KPIs, and Metrics - Status Reporting"},{"location":"autotest/","text":"Overview Purpose AF/A4 published the \"US Air Force Enterprise Logistics Flight Plan v2.0\" (ELFP) in April 2016 and the subordinate document \"Enterprise Logistics Technology Annex\" (ELTA) in June of 2016. This plan and annex describe the desired \"synthesized logistics information\" future state of US Air Force (AF) Enterprise Logistics in 2035. BES believes that in order to maintain a path and schedule to achieve those long-term goals, a series of enabling initiatives are needed to accelerate current progress in order to achieve the necessary near-term milestones. It is the intent of the Business and Enterprise System (BES) to include the resulting Playbooks into the BES Process Directory (BPD) to ensure all members of Air Force Program Executive Office (AFPEO) BES, at all operating locations, have quick easy access to standard processes and templates for Defense Business System programs. DoD continues to recognize the need to apply automated software testing processes and procedures in a more consistent and repeatable manner. The Director of Operational Test & Evaluation (DOT&E) annual reports dating back to 2013 and earlier, show a concerted effort to improve the adoption rate of automation across the DoD. The National Defense Authorization Act (NDAA) for FY 2018 commissioned an Automated Testing Technologies study. There continues to be strong interest across the Services to investigate ways in which automation adoption and momentum can be increased. Defense Acquisition Policy, DoD Instruction 5000.02 and 5000.75 through AFMAN 63-144 contain language that encourages the use of automated testing. With the move towards more flexible and agile approaches to software development comes a greater urgency to implement test automation. This playbook addresses the desire to adopt test automation with practical, experienced-based methods and best practices. Automation Playbook Benefits Defines a common understanding of automation processes and terminology Establishes automation best practices to facilitate adoption by AF community Explains the various roles needed to start and maintain test automation Defines an overall architecture of automation applicable across projects and programs Helps programs understand how to migrate from manual to automated testing Audience This playbook is intended for those individuals responsible for the management and engineering of test automation. It provides managers with the knowledge that will help them support programs looking to implement automation and it will provide engineers with the information they will need to successfully plan the implementation of a test automation solution. The approach is holistic in that it broadly defines many factors, not just technical ones, that are necessary to understand and apply when moving towards automation. Benfits of Automated Testing An investment in automation can reap many rewards to the test team and overall project. There are primary and secondary benefits to using automated tools. Primary Benefits The primary benefits to using automation for testing can be summarized as follows: Faster test execution More reliable/repeatable test execution Increased quality from greater test coverage due to additional tests Facilitates testing of more complex scenarios Less error-prone than manual testing More consistent than manual testing Provides for unattended 24/7 test execution Ability to create additional test conditions from single script Reusability of tests within and across test events Ability to test more in the same or shorter time schedule Testing across a variety of software/hardware platforms Allows for the possibility of testing that which could not be tested manually Allows for increased frequency of testing Allows more effective use of testing resources (i.e. more test design, less manual execution) Secondary Benefits Secondary benefits for using automated test tools consist of support activities for testing, rather than the testing itself. These include: User account creation in advance of testing Database seeding with required test data Creation/management of test datasets Test environment configuration setup Pre-test initialization activities Post-test clean-up activities Automated data analysis of concluded test events Project and Program Benefits The use of automation brings benefits beyond testing to the project and program. These include: Improved software quality Earlier defect detection Fewer defects sent to next testing phase Greater efficiency in accomplishing testing Greater relevance of timely test results Reduced risk of deployment Improved test reporting Facilitated identification of defect root causes Reduced test execution cost Shortened test execution period Improved consistency of test executions Better adapted to iterative development where more frequent testing is required Improved feedback related to application quality Improved system reliability through repeatability and consistency of tests","title":"Automated Testing"},{"location":"autotest/#overview","text":"","title":"Overview"},{"location":"autotest/#purpose","text":"AF/A4 published the \"US Air Force Enterprise Logistics Flight Plan v2.0\" (ELFP) in April 2016 and the subordinate document \"Enterprise Logistics Technology Annex\" (ELTA) in June of 2016. This plan and annex describe the desired \"synthesized logistics information\" future state of US Air Force (AF) Enterprise Logistics in 2035. BES believes that in order to maintain a path and schedule to achieve those long-term goals, a series of enabling initiatives are needed to accelerate current progress in order to achieve the necessary near-term milestones. It is the intent of the Business and Enterprise System (BES) to include the resulting Playbooks into the BES Process Directory (BPD) to ensure all members of Air Force Program Executive Office (AFPEO) BES, at all operating locations, have quick easy access to standard processes and templates for Defense Business System programs. DoD continues to recognize the need to apply automated software testing processes and procedures in a more consistent and repeatable manner. The Director of Operational Test & Evaluation (DOT&E) annual reports dating back to 2013 and earlier, show a concerted effort to improve the adoption rate of automation across the DoD. The National Defense Authorization Act (NDAA) for FY 2018 commissioned an Automated Testing Technologies study. There continues to be strong interest across the Services to investigate ways in which automation adoption and momentum can be increased. Defense Acquisition Policy, DoD Instruction 5000.02 and 5000.75 through AFMAN 63-144 contain language that encourages the use of automated testing. With the move towards more flexible and agile approaches to software development comes a greater urgency to implement test automation. This playbook addresses the desire to adopt test automation with practical, experienced-based methods and best practices. Automation Playbook Benefits Defines a common understanding of automation processes and terminology Establishes automation best practices to facilitate adoption by AF community Explains the various roles needed to start and maintain test automation Defines an overall architecture of automation applicable across projects and programs Helps programs understand how to migrate from manual to automated testing","title":"Purpose"},{"location":"autotest/#audience","text":"This playbook is intended for those individuals responsible for the management and engineering of test automation. It provides managers with the knowledge that will help them support programs looking to implement automation and it will provide engineers with the information they will need to successfully plan the implementation of a test automation solution. The approach is holistic in that it broadly defines many factors, not just technical ones, that are necessary to understand and apply when moving towards automation.","title":"Audience"},{"location":"autotest/#benfits-of-automated-testing","text":"An investment in automation can reap many rewards to the test team and overall project. There are primary and secondary benefits to using automated tools. Primary Benefits The primary benefits to using automation for testing can be summarized as follows: Faster test execution More reliable/repeatable test execution Increased quality from greater test coverage due to additional tests Facilitates testing of more complex scenarios Less error-prone than manual testing More consistent than manual testing Provides for unattended 24/7 test execution Ability to create additional test conditions from single script Reusability of tests within and across test events Ability to test more in the same or shorter time schedule Testing across a variety of software/hardware platforms Allows for the possibility of testing that which could not be tested manually Allows for increased frequency of testing Allows more effective use of testing resources (i.e. more test design, less manual execution) Secondary Benefits Secondary benefits for using automated test tools consist of support activities for testing, rather than the testing itself. These include: User account creation in advance of testing Database seeding with required test data Creation/management of test datasets Test environment configuration setup Pre-test initialization activities Post-test clean-up activities Automated data analysis of concluded test events","title":"Benfits of Automated Testing"},{"location":"autotest/#project-and-program-benefits","text":"The use of automation brings benefits beyond testing to the project and program. These include: Improved software quality Earlier defect detection Fewer defects sent to next testing phase Greater efficiency in accomplishing testing Greater relevance of timely test results Reduced risk of deployment Improved test reporting Facilitated identification of defect root causes Reduced test execution cost Shortened test execution period Improved consistency of test executions Better adapted to iterative development where more frequent testing is required Improved feedback related to application quality Improved system reliability through repeatability and consistency of tests","title":"Project and Program Benefits"},{"location":"test/","text":"Test Automation What is Automation? Automation, in its simplest form, is the mechanization of a manual process that allows for that process to operate automatically. There are many applications of automation, and there are many ways in which we can test. Using automation allows us to mechanize an otherwise manual process for testing. There are many additional uses for automation, that are not specifically for testing, that can be performed with automated test tools. Examples of these may include pre-test activities such as creating user accounts and building data sets, which will ultimately be used in automated testing. Functional and regression test activities are those most frequently targeted for the use of automated testing. Additional uses for automation of tests include API testing, performance testing, security testing, and automation of test management activities. Automation in Software Lifecycle Methodologies Software development methodologies are evolving from traditional Waterfall to more recent Agile approaches. Testing is part of the overall software development process. When implementing testing automation, it must align with and conform to the project management methodology. In projects using Waterfall project management, cycles for development are long and the automation team can plan accordingly. This would include setting up many of the functions and components and building an automation framework. With Agile projects, there isn't as much time within each sprint to build out a complete automation framework so alternate solutions should be identified. Benfits to AF The AF is continually enhancing, upgrading, and/or replacing software systems and applications to meet mission and user needs. This presents an ideal opportunity to introduce test automation practices so that future iterations of the software development process will show greater: testing efficiency through faster execution testing effectiveness through additional functional coverage test repeatability through programmed execution improvement in timely reporting of system quality","title":"-Test Automation"},{"location":"test/#test-automation","text":"","title":"Test Automation"},{"location":"test/#what-is-automation","text":"Automation, in its simplest form, is the mechanization of a manual process that allows for that process to operate automatically. There are many applications of automation, and there are many ways in which we can test. Using automation allows us to mechanize an otherwise manual process for testing. There are many additional uses for automation, that are not specifically for testing, that can be performed with automated test tools. Examples of these may include pre-test activities such as creating user accounts and building data sets, which will ultimately be used in automated testing. Functional and regression test activities are those most frequently targeted for the use of automated testing. Additional uses for automation of tests include API testing, performance testing, security testing, and automation of test management activities.","title":"What is Automation?"},{"location":"test/#automation-in-software-lifecycle-methodologies","text":"Software development methodologies are evolving from traditional Waterfall to more recent Agile approaches. Testing is part of the overall software development process. When implementing testing automation, it must align with and conform to the project management methodology. In projects using Waterfall project management, cycles for development are long and the automation team can plan accordingly. This would include setting up many of the functions and components and building an automation framework. With Agile projects, there isn't as much time within each sprint to build out a complete automation framework so alternate solutions should be identified.","title":"Automation in Software Lifecycle Methodologies"},{"location":"test/#benfits-to-af","text":"The AF is continually enhancing, upgrading, and/or replacing software systems and applications to meet mission and user needs. This presents an ideal opportunity to introduce test automation practices so that future iterations of the software development process will show greater: testing efficiency through faster execution testing effectiveness through additional functional coverage test repeatability through programmed execution improvement in timely reporting of system quality","title":"Benfits to AF"}]}